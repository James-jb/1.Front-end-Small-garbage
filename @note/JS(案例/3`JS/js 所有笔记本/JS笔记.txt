  j s 的组成	
	ECMAScript 是基础啊！
	DOM （是文档
	BOM （是浏览器

     JS的所有样式 
	行内样式 onclick="alert(' 东西 ')
	嵌入样式 <script type="text/javascript">alert（'东西'）</script>
	外部样式  <script src="地址"></script>

	注释 单1//  多/*
  可以用快捷键 

=====================基本类型=========================
         @数据类型（要等号 右边来确定的）
    简单数据类型（数字 布尔 字符 undefined 空值=Null）
    标识符 ---自己定义的符号
    关键字 保留字 

 1 数字
     1 js 中 加0表八进制；加0x表十六进制
     2 Number. MAC/MIX_VALUE 最大/小值
        - lnfinity是无穷大 小
     3 is NaN 判断数字 | NaN 不是数字
 2 字符串 String
      用 '' / ""  外单内双
        转义符  ---  \  开头
        \n 表换行    \' 表单引号 
        \t  tab缩进  \b 表空格
      长度  length  获取字符长度
      拼接用 + 表连接 |数值相加,字符相连
        引引加加  '+ 东西 +'
 3 布尔
      true对=1 false错=0
      undefined 未定义 Null 空
     typeof 检测 黑是字符性 蓝是数字 
 4 Undefined + 字符连 数字,布尔NaN
 5 Null +      字符连 数字,布尔  
 typeof 是关键字 用来检测

      #数据类型转换
    字面量是
1变成字符串 黑色
     1 (变量.toString()) 2 (String(变量)) 
     3 变(量+拼接字符串)

2变成数字 深蓝色
     1 (parseInt (变量))  用了取整
     2 (parseFloat(变量)) 用了取小数
     3 (Number(变量))    强制的
     4  + - * /        也可以转换
      ++  -- 前值先计算,后赋值 / 后置反正

3变成布尔 是整数) 
     1 Boolean((变量));


         @算术运算符
  #普通运算
    + - * / 运算符号
       %取余  最高17位 
   递增  ++   |    递减  --  
 后值 : 先返回,原值 后自+1(先人后己)   
 前值 : 先己加，后运算（先己后人)

  #比较
  1  = | >     |  <  |   != 不等
  1 => | 2 =<  | 3==  (会转性）
  1=赋值  2==判断  3===全等
  
  #逻辑（用来判断）
  1&& ang 与 ( 两侧都为T 结果是T;有一侧为F 结果为F)
  2|| or 或  ( 两侧为F 结果为F;有一侧为T 结果为T)
  3！not 非 ( 都懂 )
  断路(与 或) --- 由第一个表达式确定

  #赋值（  =  ）
   赋值后变呀！！！
    += , -=     *=  , /= 

  #运算符优先级
  1小括号 2一元 3算术(+ - * /) 
  4关系(< > =) 5相等 
  6逻辑(或与非) 7赋值 8逗号


         @编译型语言 | 解释型语言
      1编译  2解释-同时进行
   1 标识符:开发人的为变量・属性
   2 关键字:懂！
   3 保留字:将来会成关键字
   5 表达式:就是所有的设子
    #大 中 小括号
       ( 是优先级
     【 是数组
    { 是对象
=======================================================
=======================================================


=====================类型==============================
         @变量 
	1变量是一个盒子=容器/内存的空间  2赋值   
	var age = (申请变量) 
	prompt  ('用户输入')		
	alert  (警示框)  
	console.log('给程序员看的')

   #列如：
   var 名 = 值;
   var myname = prompt('输入你的名字')
   alert(myname)


         @函数（封装可以重复执行的代码块）
1声明 --- function 函数名=实参 ( 形参1,形参2...) {函数体} 
2调用 --- 函数名( 实参1,实参2...)
    #形参(不要声明)与实参1.个数要一样
       实参数(在小括号
       形参数(在声明

    #定义时（少了会num|多了不要） 
  return      跳出循环, 终止函数
    break       结束^当前的循环
    continue  跳出^本次循环

    #arguments --- 储存传过来的所有实参数
    用法：直接加 
    #reverse --- 翻转


         @对象（是一个具体的事）！！！
 由 属性 和 方法 --- (属性 用名称 | 方法 用动词)
    #创建对象
      1字面量{} 
        //采用键(属性名)值(类值)对的形式
      2new Object (new是在内存创建对象)
      列如：
          var obj = new Object();
          obj.名 = ; 
          ...
      3构造函数---就是封装的是对象 首字母大写
       列如:
          函数+对象
         var 名 = new 实参 (东西...)
          
        
    #调用对象---下标访问
        对象.属性名
        对象['属性名']
        对象.方法名()

    #遍历对象
       列如：
          var 名 = {
             name: 'pink'
             ...
          }
          for (var k in 名){
             console.log(k); //是k的 属性名
             console.log(obj[k])//是 属性值
          }


        @变量 属性 函数 对象的区别
  #相同:都是来存储数据的
  #不同: 
      1变量: 单独声明并赋值
      2属性：不要声明 用使用是 对象.属性
      
      3函数：要单独的声明 调用的单独存在
      4对象：在对象里面 调用 对象.方法()


         @数组 --- 一组数据的集合
  new 来创建数组
  [ ] 方括号 创建 数组  用逗号分开
    语法：
     var 名称 = [1,2,'pink']
      //数字下标会从0开始排序 
    获取：--- (数组名[索引号])
      console.log (数组名[0--序号])

   #遍历数组 --- 是把数组 从头到尾 访问一遍;用循环
    语法：
     for (var i = 0 ; i < 3 ; i++) {
        console.log(数组名[i]);
     }
     
   #数组长度 
    语法: --- 数组名.length
     数组名.length
     for () { }  //都懂

   #新增数组 --- 用length添加
     语法：
      arr[3] = '值';
      
   #删除数组 --- 就是存在另一个数组

   #冒泡排序（就是一个一个得比较）
     语法：--- for中for if 
       for ( ) {
          fro ( ) { if  
          }
       }

=======================================================
=======================================================
 
 
=====================控制语句==========================
         @流程控制（顺序 分支 循环）
    #判断：1.if  2.if else if  3switch
  1分支:if
    if (条件表达式)  { 执行语句 } else{ 条件二} 

  2多分支:  3.if else if 
    if (条件1) {语句1} else if (条件2) {语句2} else {最后的}

  3匹配 switch 
    switch (表达式) {case value1: 执行语句1; break;  
    case value2:执行语句2 ; break;
    case balue3:执行语句3 ; break;
    ...
    default:    最后的语句; }

    #循环: 1.for   2.while   3.do while  
  1普通循环
  for  (初始化变量; 条件; 操作表达式)  { 循环体 }

  2计数要为 T
  while (条件表达式) { 循环体; n++; }
  //结果为t 里面要有计时器

  3先循环一下在判断哦~do...while
  do {
     循环体
  } while (条件表达式) 

  4关键字---跳出
continue  跳出 本次循环 执行剩余的循环
break   跳出 整个循环

  5计数器---变量 用来计数呀！
  
   *@三(一、二)元表达式---简单的else if
  ++num   3+5   ? : 
   #语法结构
    表达式? 表达式1: 表达式2;

=======================================================
=======================================================


=======================概念=============================
         @作用域（在范围内的效果）
  #分类：全局变量+局部变量(互不影响)
   局部：
      在 函数内部是局部
   全局：
      在外面的
      在函数内部没有声明属于全局变量

  #效率: 全局是浏览器内,占内存.
       局部:是当前程序后销毁.

  #作用域链:  就近原则(站在目的出发，一层一层的查找)      
       内部可以访问外部的函数 


         @预解析 (之后 才执行)
  引性会把 --- js把var function 提升最前
    变量提升 ; 函数 必须在声明下

===========================================================
===========================================================


======================高级・对象(不懂)============================
   https://developer.mozilla.org/zh-CN/ --- MDN的地址
	      
         @ 内置对象
   包括(日期、数组、布尔、算术、RegExp对象)
   分类：自定义对象   2浏览器对象   3内置对象

 
		 #1 Math 对象 (//不需要new 可以直接调用)
    方法：
 Math  .PI圆周率
       .abs绝对值 
       .floor取整  .seil 往上取整  .ceil上 
       .round 正四舍五入|-5有问题 
       .random 随机取(不跟参数 0=< x <1) 

    用法：
      Math.max([value1[,value2,...]]) 
       没有参数返回infinity
    *随机函数:
    function 名称 (min, max){ 
       return Math.floor(Math.random() * (max - min + 1)) + min;
    }


       #2 Date 函数  (时间 要new)
  console.log(date.getFullYear()); //本地时间 年
  getMonth()+1);  //月  |  getDate ());   //天
  Hours          //小时 |  Minutes()    //分钟  
  Seconds        //秒   |  
      Day ()       //星期几 // 要加数组

    列如:
      var 名称 = new Date(); //返回时间
 
   #总的毫秒输:从1970开始 
      1 setTime  |  2 valueOf 
     列如：
       console.log(date.valueOf( ))
       var 名称 =  + new Date ();


         #3 Array 数组
    创建：
      var 名 = []
    #添加元素：
      1 push 添加到后     
      2 unshift 添加到前  
    #删除元素：
      3 pop 删除最后一个 
      4 shift 删除第一个 
     列如：
      arr.push(值);
      console.log(arr.pop());
    #数组排序
      sort()
      列如：
        arr.sort([值])
    #数组索引---查找位置
      indexOf()  返回第一个 没有-1 
      lastInsexOf()  倒着找

    #instanceof 用来检测数组
     列如：
      var arr1 = new Array([2, 3]);
      console.log(reverse(1, 2, 3));


         @数组・转换
    #数组 转换 字符串
      ToString(将数组 转换 字符串) 
      join(分隔符)
    列如：
      console.log(arr.toString())
      console.log(arr.join(分隔符))


         @字符串 包装   
    #包装: 把简单 成 复杂类型
      1 length()  
      2 String()  

    #查找字符
      indexOf('要查找的字符', [起初位置]) 是第一个
      可以用for来查找多个

    #返回字符(重点)
     charAt(index)    指定'位置'字符
	  charCodeAt(index) 字符的ASCLL码
	  str[index]       处于字符
       列如：

    #拼接 与 截取字符
      concat(str1, str2, str3...) 拼接
      substr(start,length) 
      slice(start,end)  替换 第一个 与后一个 
      substring(start,end) 
    #替换
       split(字符 变成 数组) 
       
 
         @简单、复杂数据类型 = C里面指针
	简单数据类型( 栈zhan 里面 ）
     unll是一个空的 
string number boolean undefined 

	复杂数据类型=对象类型( 堆 里面 ）
     Object Array Date 

====================================================
====================================================