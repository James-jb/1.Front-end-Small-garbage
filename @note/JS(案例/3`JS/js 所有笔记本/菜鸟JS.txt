使用 window.alert( ) 弹出警告框。
使用 document.write( ) 方法将内容写到 HTML 文档中。
使用 innerHTML 写入到 HTML 元素。
使用 console.log( ) 写入到浏览器的控制台。


         @基本的语句
语句	描述
break	用于跳出循环。
catch	语句块，在 try 语句块执行出错时执行 catch 语句块。
continue	跳过循环中的一个迭代。
do ... while	执行一个语句块，在条件语句为 true 时继续执行该语句块。
for	在条件语句为 true 时，可以将代码块执行指定的次数。
for ... in	用于遍历数组或者对象的属性（对数组或者对象的属性进行循环操作）。
function	定义一个函数
if ... else	用于基于不同的条件来执行不同的动作。
return	退出函数
switch	用于基于不同的条件来执行不同的动作。
throw	抛出（生成）错误 。
try	实现错误处理，与 catch 一同使用。
var	声明一个变量。


              @变量--用于存储信息的"容器"。
   用 var 来声明  ；  =  来赋值
   列如：var carname="Volvo";
     注意：
       变量必须以字母开头
       变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）
       变量名称对大小写敏感（y 和 Y 是不同的变量）


              @数据类型
值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、
                  对空（Null）、未定义（Undefined）、Symbol。
引用数据类型：对象(Object)、数组(Array)、函数(Function)。


              @对象--是拥有属性和方法的数据
    name: value (键与值以冒号分割)
    methodName : function() {// 代码 }


              @函数--可重复使用的代码块
 语法：
 function name(  )
      {  // 执行代码  }


              @作用域--可访问变量的集合（全 \ 局）          
  变量生命周期 -- 明时初始化到 销毁 


              @事件 --- 在HTML的事件
 事件	           描述
onchange	HTML 元素改变
onclick	用户点击 HTML 元素
onmouseover	用户在一个HTML元素上移动鼠标
onmouseout	用户从一个HTML元素上移开鼠标
onkeydown	用户按下键盘按键
onload	浏览器已完成页面的加载


              @字符串 --- 用于存储和处理文本
 插入到引号中的任何字符。你可以使用单引号或双引号：           
              特殊字符
   代码	输出
\'	单引号       \"	双引号
\\	反斜杠       \n	换行
\r	回车         \t	tab(制表符)
\b	退格符       \f	换页符   


              @ 运算符
  运算符 = 用于赋值。   运算符 + 用于加值。
      +  -  *  /  加减乘除
      ++ 自增    --自减


              @比较 和 逻辑运算符
    == 等于      === 绝对等于             
    !=  不等于    !== 不绝对等于  
    <     <=    \与\      =>    >    大于、小于
              逻辑运算符
    &&   and      与
    ||      or    或 一个
    !       not   否


              @if...Else 语句 --- 判断
  if 语句 - 只有当指定条件为 true 时，使用该语句来执行代码
 if...else 语句 - 当条件为 true 时执行代码，当条件为 false 时执行其他代码
 if...else if....else 语句- 使用该语句来选择多个代码块之一来执行
 switch 语句 - 使用该语句来选择多个代码块之一来执行

  语法：
 if (condition)  {  当条件为 true 时执行的代码  }


              @switch 语句 --- 循环
switch 是语句来选择要执行的多个代码块之一

  语法: 
switch(n)
{       case 1:
        执行代码块 1
        break;
    case 2:
        执行代码块 2
        break;
    default:
        与 case 1 和 case 2 不同时执行的代码}       
  break 关键字 -- 是暂停
  default 关键词  -- 规定匹配不存在时做的事情：  


              @for 循环--指定的次数。
for - 循环代码块一定的次数
for/in - 循环遍历对象的属性
while - 当指定的条件为 true 时循环指定的代码块
do/while - 同样当指定的条件为 true 时循环指定的代码块            

   语法: 
   for (语句 1; 语句 2; 语句 3)
{  被执行的代码块  }    


              @while 循环--
条件为真时循环执行代码块

  语法:
while (条件)
{  需要执行的代码  }          


              @do/while 循环
  语法
do
{  需要执行的代码  }
while (条件);        


              @break 和 continue 语句      
  break 语句用于跳出循环。
  continue 用于跳过循环中的一个迭代。    


                @typeof, null, 和 undefined
   typeof 用来检测变量的数据类型
     null 表示 "什么都没有"     
      undefined 是一个没有设置值的变量


              @类型转换
   typeof 操作符来查看 JavaScript 变量的数据类型。 
    String() 可以将数字转换为字符串。    
     constructor 属性返回所有 JavaScript 变量的构造函数。
     
         #数字转换为字符串   
方法	      描述
toExponential()	把对象的值转换为指数计数法。
toFixed()	把数字转换为字符串，结果的小数点后有指定位数的数字。
toPrecision()	把数字格式化为指定的长度。
         
         #布尔值转换为字符串
String() 可以将布尔值转换为字符串。
toString() 也有相同的效果。
         
         #日期转换为字符串
Date() 返回字符串。
         
        #字符串转换为数字
方法	       描述
parseFloat()	解析一个字符串，并返回一个浮点数。
parseInt()	解析一个字符串，并返回一个整数     


              @正则表达式 ==== ？？？
     语法：
     /正则表达式主体/修饰符(可选)
      
      searrch () 使用正则表达式、字符串
      

              @错误 - throw、try 和 catch
try 语句测试代码块的错误。
catch 语句处理错误。
throw 语句创建自定义错误。
finally 语句在 try 和 catch 语句之后，无论是否有触发异常，该语句都会执行。

   语法：
      try {
          ...    //异常的抛出
      } catch(e) {
          ...    //异常的捕获与处理
      } finally {
          ...    //结束处理
      }


              @调试
1  console.log() 方法 
2  debugger 关键字


不太懂的地方
=======================================================
=======================================================
=======================================================

              @ API             ？？？
         #约束验证 DOM 属性
   属性         描述
validity	布尔属性值，返回 input 输入值是否合法
validationMessage	浏览器错误提示信息
willValidate	指定 input 是否需要验证

         #Validity 属性
input 元素的 validity 属性包含一系列关于 validity 数据属性:
   属性           描述
customError	设置为 true, 如果设置了自定义的 validity 信息。
patternMismatch	设置为 true, 如果元素的值不匹配它的模式属性。
rangeOverflow	设置为 true, 如果元素的值大于设置的最大值。
rangeUnderflow	设置为 true, 如果元素的值小于它的最小值。
stepMismatch	设置为 true, 如果元素的值不是按照规定的 step 属性设置。
tooLong	设置为 true, 如果元素的值超过了 maxLength 属性设置的长度。
typeMismatch	设置为 true, 如果元素的值不是预期相匹配的类型。
valueMissing	设置为 true，如果元素 (required 属性) 没有值。
valid	设置为 true，如果元素的值是合法的。


              @this---不是固定不变的
在方法中，this 表示该方法所属的对象。
如果单独使用，this 表示全局对象=dbject window
在函数中，this 表示全局对象。
在函数中，在严格模式下，this 是未定义的(undefined)。
在事件中，this 表示接收事件的元素。
类似 call() 和 apply() 方法可以将 this 引用到任何对象

              @let 和 const --- ？？？
  JavaScript 只有两种作用域： 全局变量 与 函数内的局部变量
  
              @正则表达式---就是搜索和替换文本=没有！！！
search() 方法 用于检索字符串中指定的子字符串，
或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。

replace() 方法 用于在字符串中用一些字符替换另一些字符，
或替换一个与正则表达式匹配的子串。
   
              @JSON 是轻量级的数据交换格式
函数	描述
JSON.parse()	用于将一个 JSON 字符串转换为 JavaScript 对象。
JSON.stringify()	用于将 JavaScript 值转换为 JSON 字符串。 
            